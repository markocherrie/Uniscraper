WrittenExam=as.numeric(unlist(strsplit(assessment, ","))[1])
Coursework=as.numeric(unlist(strsplit(assessment, ","))[2])
PracticalExam=as.numeric(unlist(strsplit(assessment, ","))[3])
}, error=function(e){
WrittenExam<-NA
Coursework<-NA
PracticalExam<-NA}
)
# learning outcomes
learningoutcomes<-tryCatch({
learningoutcomes<-tableinfo[gregexpr(pattern ='By the end of this course students will be able to|On completion of this course|On completion of the course|Students will be able to:',tableinfo)>1][2]
#if (is.na(learningoutcomes)){
#learningoutcomes<-tableinfo[gregexpr(pattern ='On completion of this course|On completion of the course|Students will be able to:',tableinfo)>1][1]
#}
learningoutcomes<-gsub("Learning Outcomes|[\t]|-|[\n]", "", learningoutcomes)
}, error=function(e){
learningoutcomes<-NA}
)
## Skills
skills<-tryCatch({
subtable<-tableinfo[gregexpr(pattern ='Graduate Attributes and Skills',tableinfo)>1][2]
start<-gregexpr(pattern ='Graduate Attributes and Skills',subtable)[[1]][1]
end<-gregexpr(pattern ='Special Arrangements|Keywords|Additional Class Delivery Information',subtable)[[1]][1]-1
skills<-substring(subtable, start,end)
skills<-gsub("Graduate Attributes and Skills|[\t]|-|[\n]", "", skills)
}, error=function(e){
skills<-NA}
)
df<-data.frame(Name, url, SCQFcredits, Time, learningoutcomes, skills, WrittenExam, Coursework, PracticalExam)
#write.csv(df, paste0("data/", url, ".csv"), row.names=F)
return(df)
},error=function(e){
df<-data.frame(Name=NA, url=url, SCQFcredits=NA, Time=NA, learningoutcomes=NA, skills=NA, WrittenExam=NA, Coursework=NA, PracticalExam=NA)}
)
}
url="http://www.drps.ed.ac.uk/17-18/dpt/cxpghc11412.htm"
test<-eduniscraper(url)
View(test)
View(master_df)
# master data
EOGM_df$cluster<-"EOGM"
GIS_df$cluster<-"GIS"
ARCH_df$cluster<-"ARCH"
master_df<-rbind(EOGM_df, GIS_df, ARCH_df)
# 19 courses are duplicates
library(dplyr)
master_df<-master_df %>%
group_by(url) %>%
mutate(cluster_group = paste0(cluster, collapse = ","))
master_df<-master_df[!duplicated(master_df$Name),]
master_df$cluster<-NULL
# 3 course links don't work, but only one remains,
# as it is considered 'unique in above
master_df<-master_df[!is.na(master_df$Name),]
# Code NA to not entered
master_df[is.na(master_df)]<-"Not Entered"
# postgrad or undergrad
master_df$coursetype<-ifelse(grepl("Undergraduate", master_df$Name), "U", "P")
master_df$Name<-gsub("Undergraduate Course:|Postgraduate Course:", "", master_df$Name)
# get time vars
result<-list()
for(i in 1:33){
Time=unlist(strsplit(master_df$Time[i], ","))
Time<-gsub(" ", "", Time)
Time<-as.data.frame(Time)
colnames(Time)<-"TimeVars"
library(tidyr)
Time<-Time %>%
separate(TimeVars,
into = c("text", "num"),
sep = "(?<=[A-Za-z])(?=[0-9])")
Time$Name<-master_df$Name[i]
result[[i]] <- Time
}
timevars = do.call(rbind.fill, result)
timevars<-timevars %>%
spread(text, num)
timevars[is.na(timevars)]<-0
timevars<-subset(timevars, Name!=' Water Resource Management (PGGE11018)')
timevars<-subset(timevars, Name!=' Epidemiology for Public Health (PUHR11016)')
# merge with master df
master_df<-merge(master_df, timevars, by="Name", all.x=T)
master_df$Time<-NULL
master_df$NotEntered<-NULL
View(master_df)
View(master_df)
names(master_df)
g <- ggplot(master_df, aes(SCQFcredits))
g + geom_bar()
library(ggplot2)
g <- ggplot(master_df, aes(SCQFcredits))
g + geom_bar()
library(scales)
g <- ggplot(master_df, aes(SCQFcredits))
+  geom_bar(aes(y =(SCQFcredits)/sum(SCQFcredits))) +
## version 3.0.9
# scale_y_continuous(labels = percent_format())
## version 3.1.0
scale_y_continuous(labels=percent)
g <- ggplot(master_df, aes(SCQFcredits))
+  geom_bar(aes(y =(..count..)/sum(..count..))) +
## version 3.0.9
# scale_y_continuous(labels = percent_format())
## version 3.1.0
scale_y_continuous(labels=percent)
ggplot(master_df) + stat_count(mapping = aes(x=SCQFcredits, y=..prop.., group=1))
ggplot(master_df) + stat_count(mapping = aes(x=SCQFcredits, y=..perc.., group=1))
ggplot(master_df) + stat_count(mapping = aes(x=SCQFcredits, y=..prop.., group=1))
master$SCQF<-as.factor(master$SCQF)
master_df$SCQF<-as.factor(master_df$SCQF)
library(ggplot2)
ggplot(master_df)
+ stat_count(mapping = aes(x=SCQFcredits, y=..prop.., group=1))
master_df$SCQFcredits<-as.factor(master_df$SCQFcredits)
library(ggplot2)
ggplot(master_df)
+ stat_count(mapping = aes(x=SCQFcredits, y=..prop.., group=1))
library(ggplot2)
ggplot(master_df)
+ stat_count(mapping = aes(x=SCQFcredits, y=..prop.., group=1))
ggplot(master_df) + stat_count(mapping = aes(x=SCQFcredits, y=..prop.., group=1))
ggplot(master_df) + stat_count(mapping = aes(x=as.factor(SCQFcredits), y=..prop.., group=1))
ggplot(master_df) + stat_count(mapping = aes(x=SCQFcredits, y=(..prop..)*100, group=1))
library(ggplot2)
ggplot(master_df) + stat_count(mapping = aes(x=SCQFcredits, y=..prop.., group=1))
table(master$df)
table(master_df$SCQFcredits)
View(master_df)
table(master_df$SCQFcredits)
master_df$SCQFcredits
table(as.numeric(master_df$SCQFcredits))
table(master_df$SCQFcredits)
summary(master_df$SCQFcredits)
summary(master_df)
summary(master_df$SCQFcredits)
names(master_df)
library(ggplot2)
ggplot(master_df) + stat_count(mapping = aes(x=cluster_group, y=..prop.., group=1))
summary(master_df$cluster_group)
library(ggplot2)
ggplot(master_df) + stat_count(mapping = aes(x=cluster_group, y=..prop.., group=1))
g + geom_bar
g<-ggplot(master_df) + aes(cluster_group)
g + geom_bar
g<- ggplot(master_df) + aes(cluster_group)
g
g + geom_bar()
View(master_df)
library(ggplot2)
g<- ggplot(master_df) + aes(cluster_group)
g + geom_bar()
g
g<- ggplot(master_df) + aes(cluster_group)
g + geom_bar()
library(ggplot2)
g<- ggplot(master_df) + aes(cluster_group)
g + geom_bar()
summary(master_df$cluster_group)
table(master_df$cluster_group)
View(master_df)
library(ggplot2)
ggplot(master_df) + stat_count(mapping = aes(x=Coursework, y=..prop.., group=1))
summary(master_df$Coursework)
ggplot(master_df) + stat_count(mapping = aes(x=Coursework, y=..prop.., group=1, color=Coursework))
attach(master_df)
detach(master_df)
names(master_df)
master_df$assessmentbreakdown<-paste0("C", coursework, "W", WrittenExam, "P", PracticalExam)
master_df$assessmentbreakdown<-paste0("C", master_df$Coursework,
"W", master_df$WrittenExam,
"P", master_df$PracticalExam)
View(master_df)
library(ggplot2)
ggplot(master_df) + stat_count(mapping = aes(x=assessmentbreakdown, y=..prop.., group=1))
summary(master_df$assessmentbreakdown)
table(master_df$assessmentbreakdown)
22/33
View(master_df)
library(topicmodels)
library(tm)
text_corpus <- VCorpus(VectorSource(master_df$learningoutcomes))
text_corpus
text_corpus_clean <- tm_map(text_corpus,
content_transformer(tolower))
text_corpus_clean <- tm_map(text_corpus_clean, stemDocument)
text_corpus_clean <- tm_map(text_corpus_clean, removeNumbers)
text_corpus_clean <- tm_map(text_corpus_clean,
removeWords, stopwords())
text_corpus_clean <- tm_map(text_corpus_clean, removePunctuation)
text_corpus_clean <- tm_map(text_corpus_clean, stripWhitespace)
text_corpus_clean <- tm_map(text_corpus,
content_transformer(tolower))
text_corpus_clean <- tm_map(text_corpus_clean, stemDocument)
text_corpus_clean <- tm_map(text_corpus_clean, removeNumbers)
text_corpus_clean <- tm_map(text_corpus_clean,
removeWords, stopwords())
text_corpus_clean <- tm_map(text_corpus_clean, removePunctuation)
text_corpus_clean <- tm_map(text_corpus_clean, stripWhitespace)
print(text_corpus_clean)
text_corpus_clean
library(wordcloud)
wordcloud(text_corpus_clean, min.freq = 10, random.order = FALSE,
colors=brewer.pal(8, "Dark2"))
head(master_df$learningoutcomes)
master_df$learningoutcomes<-gsub("On completion of this course, the student will be able to:|By the end of this course students will be able to:|Students will be able to:|On completion of the course, a student should", "", master_df$learningoutcomes)
text_corpus <- VCorpus(VectorSource(master_df$learningoutcomes))
text_corpus_clean <- tm_map(text_corpus,
content_transformer(tolower))
text_corpus_clean <- tm_map(text_corpus_clean, removeNumbers)
text_corpus_clean <- tm_map(text_corpus_clean,
removeWords, stopwords())
text_corpus_clean <- tm_map(text_corpus_clean, removePunctuation)
text_corpus_clean <- tm_map(text_corpus_clean, stripWhitespace)
# word cloud
library(wordcloud)
wordcloud(text_corpus_clean, min.freq = 10, random.order = FALSE,
colors=brewer.pal(8, "Dark2"))
wordcloud(text_corpus_clean, min.freq = 5, random.order = FALSE,
colors=brewer.pal(8, "Dark2"))
library(wordcloud)
wordcloud(text_corpus_clean, min.freq = 2, random.order = FALSE,
colors=brewer.pal(8, "Dark2"))
library(wordcloud)
wordcloud(text_corpus_clean, min.freq = 1, random.order = FALSE,
colors=brewer.pal(8, "Dark2"))
library(wordcloud)
wordcloud(text_corpus_clean, max.freq = 2, random.order = FALSE,
colors=brewer.pal(8, "Dark2"))
text_dtm <- DocumentTermMatrix(text_corpus_clean)
text_dtm
warnings()
findFreqTerms(text_dtm, lowfreq = 20)
findFreqTerms(text_dtm, lowfreq = 5)
text_lda <- LDA(text_dtm, k = 2, method = "VEM", control = NULL)
library(tidytext)
text_topics <- tidy(text_lda, matrix = "beta")
text_top_terms <- text_topics %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
text_top_terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
install.packages("tidytext")
text_topics <- tidy(text_lda, matrix = "beta")
library(tidytext)
text_topics <- tidy(text_lda, matrix = "beta")
text_top_terms <- text_topics %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
text_top_terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
library(topicmodels)
text_lda <- LDA(text_dtm, k = 4, method = "VEM", control = NULL)
library(tidytext)
text_topics <- tidy(text_lda, matrix = "beta")
text_top_terms <- text_topics %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
text_top_terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
?stopwords
library(topicmodels)
library(tm)
master_df$learningoutcomes<-gsub("On completion of this course, the student will be able to:|By the end of this course students will be able to:|Students will be able to:|On completion of the course, a student should", "", master_df$learningoutcomes)
text_corpus <- VCorpus(VectorSource(master_df$learningoutcomes))
# clean up
text_corpus_clean <- tm_map(text_corpus,
content_transformer(tolower))
#text_corpus_clean <- tm_map(text_corpus_clean, stemDocument)
text_corpus_clean <- tm_map(text_corpus_clean, removeNumbers)
text_corpus_clean <- tm_map(text_corpus, removeWords, c(stopwords("english"),"understand","demonstrate","including",
"different", "appropriate", "able",
"students", "ability", "coursework",
"examination"))
text_corpus_clean <- tm_map(text_corpus_clean, removePunctuation)
text_corpus_clean <- tm_map(text_corpus_clean, stripWhitespace)
# word cloud
library(wordcloud)
wordcloud(text_corpus_clean, min.freq = 2, random.order = FALSE,
colors=brewer.pal(8, "Dark2"))
# frequency of words
text_dtm <- DocumentTermMatrix(text_corpus_clean)
text_dtm
findFreqTerms(text_dtm, lowfreq = 5)
library(topicmodels)
text_lda <- LDA(text_dtm, k = 4, method = "VEM", control = NULL)
library(tidytext)
text_topics <- tidy(text_lda, matrix = "beta")
text_top_terms <- text_topics %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
text_top_terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
### topic modelling for the skills and learning outcomes
library(topicmodels)
library(tm)
master_df$learningoutcomes<-gsub("On completion of this course, the student will be able to:|By the end of this course students will be able to:|Students will be able to:|On completion of the course, a student should", "", master_df$learningoutcomes)
text_corpus <- VCorpus(VectorSource(master_df$learningoutcomes))
# clean up
text_corpus_clean <- tm_map(text_corpus,
content_transformer(tolower))
#text_corpus_clean <- tm_map(text_corpus_clean, stemDocument)
text_corpus_clean <- tm_map(text_corpus_clean, removeNumbers)
text_corpus_clean <- tm_map(text_corpus, removeWords, c(stopwords("english"),"understand","understanding",
"demonstrate","including",
"different", "able",
"students", "ability", "coursework",
"examination"))
text_corpus_clean <- tm_map(text_corpus_clean, removePunctuation)
text_corpus_clean <- tm_map(text_corpus_clean, stripWhitespace)
# word cloud
library(wordcloud)
wordcloud(text_corpus_clean, min.freq = 2, random.order = FALSE,
colors=brewer.pal(8, "Dark2"))
# frequency of words
text_dtm <- DocumentTermMatrix(text_corpus_clean)
text_dtm
findFreqTerms(text_dtm, lowfreq = 5)
library(topicmodels)
text_lda <- LDA(text_dtm, k = 4, method = "VEM", control = NULL)
library(tidytext)
text_topics <- tidy(text_lda, matrix = "beta")
text_top_terms <- text_topics %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
text_top_terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
opic modelling for the skills and learning outcomes
library(topicmodels)
library(tm)
master_df$learningoutcomes<-gsub("On completion of this course, the student will be able to:|By the end of this course students will be able to:|Students will be able to:|On completion of the course, a student should", "", master_df$learningoutcomes)
text_corpus <- VCorpus(VectorSource(master_df$learningoutcomes))
# clean up
text_corpus_clean <- tm_map(text_corpus,
content_transformer(tolower))
#text_corpus_clean <- tm_map(text_corpus_clean, stemDocument)
text_corpus_clean <- tm_map(text_corpus_clean, removeNumbers)
text_corpus_clean <- tm_map(text_corpus, removeWords, c(stopwords("english"),"understand","understanding",
)
PW{}
### topic modelling for the skills and learning outcomes
library(topicmodels)
library(tm)
master_df$learningoutcomes<-gsub("On completion of this course, the student will be able to:|By the end of this course students will be able to:|Students will be able to:|On completion of the course, a student should", "", master_df$learningoutcomes)
text_corpus <- VCorpus(VectorSource(master_df$learningoutcomes))
# clean up
text_corpus_clean <- tm_map(text_corpus,
content_transformer(tolower))
#text_corpus_clean <- tm_map(text_corpus_clean, stemDocument)
text_corpus_clean <- tm_map(text_corpus_clean, removeNumbers)
text_corpus_clean <- tm_map(text_corpus, removeWords, c(stopwords("english"),"understand","understanding",
"demonstrate","including",
"different", "able",
"students", "ability", "coursework",
"examination", "have", "use"
,"key", "group"))
text_corpus_clean <- tm_map(text_corpus_clean, removePunctuation)
text_corpus_clean <- tm_map(text_corpus_clean, stripWhitespace)
# word cloud
library(wordcloud)
wordcloud(text_corpus_clean, min.freq = 2, random.order = FALSE,
colors=brewer.pal(8, "Dark2"))
# frequency of words
text_dtm <- DocumentTermMatrix(text_corpus_clean)
text_dtm
findFreqTerms(text_dtm, lowfreq = 5)
library(topicmodels)
text_lda <- LDA(text_dtm, k = 4, method = "VEM", control = NULL)
library(tidytext)
text_topics <- tidy(text_lda, matrix = "beta")
text_top_terms <- text_topics %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
text_top_terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
### topic modelling for the skills and learning outcomes
library(topicmodels)
library(tm)
master_df$learningoutcomes<-gsub("On completion of this course, the student will be able to:|By the end of this course students will be able to:|Students will be able to:|On completion of the course, a student should", "", master_df$learningoutcomes)
text_corpus <- VCorpus(VectorSource(master_df$learningoutcomes))
# clean up
text_corpus_clean <- tm_map(text_corpus,
content_transformer(tolower))
#text_corpus_clean <- tm_map(text_corpus_clean, stemDocument)
text_corpus_clean <- tm_map(text_corpus_clean, removeNumbers)
text_corpus_clean <- tm_map(text_corpus, removeWords, c(stopwords("english"),"understand","understanding",
"demonstrate","including",
"different", "able",
"students", "ability", "coursework",
"examination", "have", "use"
,"key", "group"))
text_corpus_clean <- tm_map(text_corpus_clean, removePunctuation)
text_corpus_clean <- tm_map(text_corpus_clean, stripWhitespace)
# word cloud
library(wordcloud)
#wordcloud(text_corpus_clean, min.freq = 2, random.order = FALSE,
#          colors=brewer.pal(8, "Dark2"))
# frequency of words
text_dtm <- DocumentTermMatrix(text_corpus_clean)
text_dtm
findFreqTerms(text_dtm, lowfreq = 5)
library(topicmodels)
text_lda <- LDA(text_dtm, k = 2, method = "VEM", control = NULL)
library(tidytext)
text_topics <- tidy(text_lda, matrix = "beta")
text_top_terms <- text_topics %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
text_top_terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
names(master_df)
master_df %>% tidyr::gather("Name", "value", 11:21)
master_df %>% tidyr::gather("Name", "value", 11:21) %>%
ggplot(., aes(Xax, value))+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black")+
facet_wrap(~Name)
test<-master_df %>% tidyr::gather("Name", "value", 11:21)
View(test)
test<-master_df %>% tidyr::gather("Name", "value", 11:21) %>%
ggplot(., aes(Name, value))+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black")+
facet_wrap(~Name)
test
names(test)
test<-master_df %>% tidyr::gather("Name", "value", 11:21)
test
View(test)
View(test)
?filter
?select
names(test)
test<-master_df %>% tidyr::gather("Name", "value", 11:21)%>%
select("Name", "value")
test<-master_df %>% tidyr::gather("Name", "value", 11:21)%>%
select(c("Name", "value"))
test<-select(test, c("Name", "value"))
test<-master_df %>% tidyr::gather("Name", "value", 11:21)
test<-select(test, c("Name", "value"))
View(test)
ncols(test)
ncol(test)
test<-test[,13:14]
View(master_df)
# word cloud
library(wordcloud)
wordcloud(text_corpus_clean, min.freq = 2, random.order = FALSE,
#          colors=brewer.pal(8, "Dark2"))
)
library(wordcloud)
wordcloud(text_corpus_clean, min.freq = 2, random.order = FALSE,
colors=brewer.pal(8, "Dark2"))
library(wordcloud)
wordcloud(text_corpus_clean, min.freq = 2, random.order = FALSE,
colors=brewer.pal(8, "Dark2"))
library(wordcloud)
wordcloud(text_corpus_clean, min.freq = 2, random.order = FALSE,
colors=brewer.pal(8, "Dark2"))
View(master_df)
write.csv(master_df, "output/master.csv")
write.csv(master_df, "data/master.csv", row.names=F)
library(ggplot2)
ggplot(master_df) + stat_count(mapping = aes(x=SCQFcredits, y=..prop.., group=1))
summary(master_df$SCQFcredits)
# Coursework
master_df$assessmentbreakdown<-paste0("C", master_df$Coursework,
"W", master_df$WrittenExam,
"P", master_df$PracticalExam)
ggplot(master_df) + stat_count(mapping = aes(x=assessmentbreakdown, y=..prop.., group=1))
table(master_df$assessmentbreakdown)
